@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using TestMudBlazorApplication.Dialogs;
@using TestMudBlazorApplication.Models;
@*
@using TestMudBlazorApplication.Services;
@inject ICardService CardService;*@
@inject IDialogService DialogService

@inject HttpClient _http

<h3>ScrumboardPage</h3>



@page "/page"
<MudDropContainer T="Card" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.CardStatus == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
					<MudText Typo="Typo.subtitle1"><b>@item.ColumnName</b></MudText>
					<MudSpacer />
					<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
						<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
						<MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Rounded.Edit">Rename Section</MudButton>
					</MudMenu>
				</MudToolBar>
				<MudDropZone T="Card" Identifier="@item.ColumnName" Class="mud-height-full" />
				<MudButton OnClick="@(() => { AddTask(item);})" StartIcon="@Icons.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
			</MudPaper>
		}
		<MudPaper Class="pa-4" Elevation="0" Width="224px">
			@if (_addSectionOpen)
			{
				<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
					<EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
						<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudContainer  >
			<MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">
				<MudButton Color="Color.Warning" OnClick="@(() => {DeleteTask(context);})">Delete</MudButton>
				<MudButton OnClick="@(() => {UpdateTask(context);})">
					<MudText>@context.Title</MudText>
				</MudButton>
			</MudPaper>
		</MudContainer>
	</ItemRenderer>
</MudDropContainer>

@code {
	protected override async Task OnInitializedAsync()
	{
		_sections = await _http.GetFromJsonAsync<List<Column>>($"{_baseUrl}/Column"); // Gets the sections from the database

		List<Card> ?tempCards = await _http.GetFromJsonAsync<List<Card>>($"{_baseUrl}/Card"); //await CardService.GetAllCards(); // Gets the tasks from the database.
		foreach (var item in tempCards)
		{
			_tasks.Add(item);
		}
		_users = await _http.GetFromJsonAsync<List<User>>($"{_baseUrl}/User"); // Gets the users from the database
		_dropContainer.Refresh();
	}
	private MudDropContainer<Card> _dropContainer; // The UI element that contains the board

	private bool _addSectionOpen;

	/* Setup for board  */
	private List<Column> _sections = new();
	private List<Card> _tasks = new();
	private List<User> _users = new(); // the list of users available for the tasks.
	private Card _newCard = new(); // a variable to use for adding new tasks.
	private string _baseUrl = "http://10.108.130.43:5213/api";

	/* handling board events */
	private async void TaskUpdated(MudItemDropInfo<Card> info)
	{//Runs when a task has been moved, and updates the database.
		info.Item.CardStatus = info.DropzoneIdentifier;
		await _http.PutAsJsonAsync<Card>($"{_baseUrl}/Card/{info.Item.CardId}", info.Item);

	}


	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
		public string Name { get; set; }
	}

	private async void OnValidSectionSubmit(EditContext context)
	{
		Column newColumn = new Column(newSectionModel.Name); // Created the column variable to be sent to the API.
		newSectionModel.Name = string.Empty; // Empties the variable that contains names of the columns.
		_addSectionOpen = false;
		HttpResponseMessage responseMessage = await _http.PostAsJsonAsync<Column>($"{_baseUrl}/Column/", newColumn); // Calls POST to the API.
		if (responseMessage.IsSuccessStatusCode) // If the POST call is successful, add the column to the frontend UI.
		{

			//Console.WriteLine("Column was added successfully");//Debug to confirm column was added to the database.
			Column addedColumn = await responseMessage.Content.ReadFromJsonAsync<Column>(); // Gets the returned column from the API.
																							//int columnIndex = _sections.FindIndex(c => c.ColumnName == newColumn.ColumnName);
			if (addedColumn is not null) // If a column has been returned from the API, add it to the _sections variable.
			{
				_sections.Add(addedColumn); //Add the column to the UI.
			}
			else
			{
				//Console.WriteLine("addedColumn in OnValidSelectionSubmit was null");//Debug that an error occured.
			}


			StateHasChanged(); // Tells the UI to update.
		}
		else // If POST call was not successfull, debug the error.
		{

			//Console.WriteLine("Column not added: " + responseMessage.StatusCode.ToString());//Debug to confirm column was not added, including statuscode.
		}

	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}

	private async void UpdateTask(Card card)
	{
		// Sets parameters for the dialog to update a task.
		var parameters = new DialogParameters();
		parameters.Add("StatusName", card.CardStatus);
		parameters.Add("Columns", _sections);
		parameters.Add("oldCard", card);
		parameters.Add("_users", _users);

		// Opens the dialog to update a task, and recieves the return statement, to evaluate if the task has actually been added, or if errors occured.
		var dialog = DialogService.Show<CardInformationDialog>("edit card", parameters);
		var result = await dialog.Result;
		var newCard = result.Data;
		if (newCard is not null && !result.Cancelled) // If something has been returned and the dialog was not cancelled, try to convert the return data to a card, and add it to the list.
		{
			Card updatedCard;
			try
			{

				updatedCard = (Card)newCard; //Maps the returned card to a new variable.
				int taskId = _tasks.FindIndex(t => t.CardId == card.CardId); //Get the index of the card in the list.
				_tasks[taskId] = updatedCard; //Updates the old card information with the new.
				_dropContainer.Refresh();//Tells the _dropContainer to update it's UI.
			}
			catch (Exception ex)
			{
				//Console.WriteLine(ex.Message);//Debugs if an error happens.
			}

		}
		//_dropContainer.Refresh();
	}


	private async void AddTask(Column section)
	{
		// Adds parameters to the dialog to add a task
		var parameters = new DialogParameters();
		parameters.Add("StatusName", section.ColumnName);
		parameters.Add("Columns", _sections);
		parameters.Add("oldCard", null);
		parameters.Add("_users", _users);

		// Opens the dialog and evaluate the returned data
		var dialog = DialogService.Show<CardInformationDialog>("Add table", parameters);
		var result = await dialog.Result;
		var newCard = result.Data;
		// If data have been returned and the dialog was not cancelled, try to add the task to the list.
		if (newCard is not null && !result.Cancelled)
		{
			//Card addedCard;
			try
			{
				Console.WriteLine(newCard.ToString());
				Card addedCard = new Card((Card)newCard); //Maps the returned card to a new variable.
				Console.WriteLine("---Card added---");
				Console.WriteLine("Id: " + addedCard.CardId);
				Console.WriteLine("title: " + addedCard.Title);
				_tasks.Add(addedCard); //Add the new card to the list.
				_dropContainer.Refresh(); // Updates the tasks on the UI.
			}
			catch (Exception ex)
			{
				//Console.WriteLine(ex.Message); //Debug error.
			}

		}
		else
		{
			_dropContainer.Refresh(); // Updates the tasks on the UI. (I don't know why I have it here as well).
		}


	}
	private async void DeleteTask(Card card)
	{
		// Adds parameters to the dialog call to delete a card.
		var parameters = new DialogParameters();
		parameters.Add("SentColumn", null);
		parameters.Add("SentCard", card);
		parameters.Add("Description", $"Are you sure you want to delete card {card.Title}?");
		parameters.Add("ConfirmText", "Delete");
		// Calls the dialog to delete the card.
		var dialog = DialogService.Show<ConfirmDialog>("Delete card", parameters);
		var result = await dialog.Result;
		if (!result.Cancelled) // If the dialog is not cancelled, remove the card from the list.
		{
			_tasks.Remove(card);

			_dropContainer.Refresh();
			StateHasChanged();
		}
		else // This was added as a debug, to check that I used IsCanceled correct.
		{
			//Console.WriteLine("DeleteTask IsCanceled is: " + dialog.Result.IsCanceled);// Debug, tells the value of IsCanceled.
		}

	}

	private async void DeleteSection(Column section)
	{
		// Adds parameters to the dialog call to delete a column.
		var parameters = new DialogParameters();
		parameters.Add("SentColumn", section);
		parameters.Add("SentCard", null);
		parameters.Add("Description", $"Are you sure you want to delete column {section.ColumnName}?");
		parameters.Add("ConfirmText", "Delete");
		// Calls the dialog to delete the column.
		var dialog = DialogService.Show<ConfirmDialog>("Delete Column", parameters);
		var result = await dialog.Result;
		if (!result.Cancelled) // If the dialog was not cancelled, Remove the column from the list.
		{
			//Console.WriteLine("Section Deleted on server");//Debug to confirm column was deleted from the database.
			if (_sections.Count == 1) // If there is only 1 column left before it was deleted, clear the lists for cards and column.
			{
				_tasks.Clear();
				_sections.Clear();
			}
			else
			{
				// gets the index of the previous column, to move the cards of the deleted column to.
				int newIndex = _sections.IndexOf(section) - 1;
				if (newIndex < 0)
				{
					newIndex = 0;
				}

				_sections.Remove(section); //Remove the column from the list.

				var tasks = _tasks.Where(x => x.CardStatus == section.ColumnName); //Gets a list of the cards belonging to the deleted column.
				foreach (var item in tasks) // For every card of the deleted column, set the to the previous column.
				{
					item.CardStatus = _sections[newIndex].ColumnName;
					await _http.PutAsJsonAsync<Card>($"{_baseUrl}/Card/{item.CardId}", item); //Updates the changes to the database.
				}
			}


			StateHasChanged(); // Tells the UI to update.
		}
		
	}

}

