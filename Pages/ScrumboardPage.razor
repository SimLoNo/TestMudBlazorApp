@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using TestMudBlazorApplication.Dialogs;
@using TestMudBlazorApplication.Models;
@*
@using TestMudBlazorApplication.Services;
@inject ICardService CardService;*@
@inject IDialogService DialogService

@inject HttpClient _http

<h3>ScrumboardPage</h3>



@page "/page"
<MudDropContainer T="Card" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.CardStatus == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
					<MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
					<MudSpacer />
					<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
						<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
						<MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Rounded.Edit">Rename Section</MudButton>
					</MudMenu>
				</MudToolBar>
				<MudDropZone T="Card" Identifier="@item.Name" Class="mud-height-full" />
				@if (item.NewTaskOpen)
				{
					<MudPaper Elevation="25" Class="pa-2 rounded-lg">
						@*<MudTextField @bind-Value="item.NewTaskName" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>*@
						<MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
				</MudPaper>
			}
			else
			{
					<MudButton OnClick="@(() => {item.NewTaskOpen = !item.NewTaskOpen; AddTask(item);})" StartIcon="@Icons.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
			}
			</MudPaper>
		}
		<MudPaper Class="pa-4" Elevation="0" Width="224px">
			@if (_addSectionOpen)
			{
				<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
					<EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
						<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Title</MudPaper>
	</ItemRenderer>
</MudDropContainer>

<MudMessageBox @ref="AddCardMessageBox">
	<MessageContent>
		<MudTextField @bind-Value="_newCard.Title" Placeholder="Title" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
		<MudTextField @bind-Value="_newCard.CardDescription" Placeholder="Description" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
		<MudSelect Placeholder="Assign user" @bind-Value="_newCard.AssignedUser">
			@foreach (var item in _users)
			{
				<MudSelectItem Value="@item">@item.Initials</MudSelectItem>
			}
		</MudSelect>
	</MessageContent>
	<YesButton>
		<MudButton Variant="Variant.Filled" Color="Color.Error">Add</MudButton>
	</YesButton>
	<NoButton>
		<MudButton Variant="Variant.Filled" Color="Color.Error">Cancel</MudButton>
	</NoButton>
	<CancelButton>

	</CancelButton>
</MudMessageBox>

@code {
	protected override async Task OnInitializedAsync()
	{
		List<Card> tempCards = await _http.GetFromJsonAsync<List<Card>>("http://localhost:5213/api/Card"); //await CardService.GetAllCards();
		foreach (var item in tempCards)
		{
			_tasks.Add(item);
		}
		_users = await _http.GetFromJsonAsync<List<User>>("http://localhost:5213/api/User");
		_dropContainer.Refresh();
		Console.WriteLine("Refreshed _dropContainer");
	}
	private MudDropContainer<Card> _dropContainer;

	private bool _addSectionOpen;

	private List<User> _users = new();
	private Card _newCard = new();
	/* handling board events */
	private async void TaskUpdated(MudItemDropInfo<Card> info)
	{
		info.Item.CardStatus = info.DropzoneIdentifier;
		await _http.PutAsJsonAsync<Card>($"http://localhost:5213/api/Card/{info.Item.CardId}", info.Item);

	}

	/* Setup for board  */
	private List<KanBanSections> _sections = new()
		{
			new KanBanSections("To Do", false, String.Empty),
			new KanBanSections("In Process", false, String.Empty),
			new KanBanSections("Done", false, String.Empty),
		};

	public class KanBanSections
	{
		public string Name { get; init; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }

		public KanBanSections(string name, bool newTaskOpen, string newTaskName)
		{
			Name = name;
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
		}
	}

	private List<Card> _tasks = new();

	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
		public string Name { get; set; }
	}

	private void OnValidSectionSubmit(EditContext context)
	{
		_sections.Add(new KanBanSections(newSectionModel.Name, false, String.Empty));
		newSectionModel.Name = string.Empty;
		_addSectionOpen = false;
	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}

	private async void AddTask(KanBanSections section)
	{
		var parameters = new DialogParameters();
		parameters.Add("StatusName", section.Name);

		var dialog = DialogService.Show<CardInformationDialog>("Add table", parameters);
		var result = await dialog.Result;
		var newCard = result.Data;
		if (newCard is not null)
		{
			Card card1;
			try
			{
				card1 = (Card)newCard;
				_tasks.Add(card1);
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
			}

		}

		//bool? result = await AddCardMessageBox.Show();
		//if (result == true)
		//{
		//	Card card = new()
		//		{
		//			UserId = _newCard.AssignedUser.UserId,
		//			Title = _newCard.Title,
		//			CardStatus = section.Name,
		//			CardDescription = _newCard.CardDescription,
		//		};
		//	HttpResponseMessage responseMessage = await _http.PostAsJsonAsync($"http://localhost:5213/api/Card", card);
		//	if (responseMessage.IsSuccessStatusCode == true)
		//	{
		//		_tasks.Add(card);
		//	}
		//}
		//else
		//{
		//	_newCard.AssignedUser = null;
		//	_newCard.Attachment = null;
		//	_newCard.Title = null;
		//	_newCard.CardStatus = null;
		//	_newCard.CardDescription = null;
		//}
		
		//
		//_tasks.Add(new Card()
			//{
			//	CardId = 2,
			//	Title = section.NewTaskName,
			//	CardStatus = section.Name,
			//	CardDescription = section.Name
			//});
		section.NewTaskOpen = false;
		_dropContainer.Refresh();
	}
	private async void DeleteTask(Card card)
	{
		HttpResponseMessage responseMessage = await _http.DeleteAsync($"http://localhost:5213/api/Card/{card.CardId}");
		if (responseMessage.IsSuccessStatusCode == true)
		{
			_tasks.Remove(card);
			_dropContainer.Refresh();
		}

	}

	private void DeleteSection(KanBanSections section)
	{
		if (_sections.Count == 1)
		{
			_tasks.Clear();
			_sections.Clear();
		}
		else
		{
			int newIndex = _sections.IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections.Remove(section);

			var tasks = _tasks.Where(x => x.CardStatus == section.Name);
			foreach (var item in tasks)
			{
				item.CardStatus = _sections[newIndex].Name;
			}
		}
	}

	MudMessageBox AddCardMessageBox { get; set; }
}

